1.5 操作系统家族
    UnixBSD
    Linux
    Windows
1.6 操作系统历史
    早起计算机使用纸带传输程序和数据，操作系统只起到加载作用
    CPU等硬件快速发展，能够支持批处理和 离线处理
    内存容量越来越大，CPU执行多个程序，多道程序设计

    为了更好的利用计算机资源，并且更好的和用户交互，出现了分时系统，将时间分为很小的片段，时钟会定期产生中断
    网络的快速发展，出现了分布式的操作系统，松、紧耦合系统
1.7 操作系统结构
    简单的操作系统：MS-DOS，单体的
    微内核设计
    VMM，虚拟机
1.8 小结

2.1 操作系统的启动
    DISK：存放OS
    BIOS：基本I/O处理操作
    BootLoader：加载OS

    计算机启动后，先从 0xf000:fff0开始执行，即CS:IP(CS:段寄存器，IP:指令寄存器)
    然后POST(加电自检)，寻找显卡和执行BIOS
    BIOS将BootLoader从磁盘的引导扇区(512字节)加载到0x7c00，将操作系统的数据从硬盘放到内存中，完成后将跳转到操作系统的起始地址，此时所有硬件的管理权限移交给OS

    操作系统与设备和程序交互
    系统调用、异常、中断
    系统调用(来源于应用程序)，应用程序主动向操作系统发出服务请求
    异常(来源于不良的应用程序)，非法指令或者其他坏的处理状态(如：内存出错)
    中断(来源于外设)，来自不同的硬件设备的计时器和网络的中断

    为什么软件要通过内核访问硬件呢？
    在计算机运行中，内核是被信任的第三方，只有内核可以执行特权指令，为了方便应用程序，应用程序不用关注底层，只需要关注操作系统提供的接口

    操作系统如何设计和实现终端、异常和系统调用
    它们三者有什么区别和特点？
    源头：
        中断来源于外设
        异常来源于程序意想不到的行为
        系统调用来源应用程序请求操作提供服务
    处理时间：
        中断是异步的
        异常是同步的
        系统调用是异步或同步的
    响应：
        中断：持续的，对用户应用程序是透明的
        异常：杀死或重新执行意想不到的应用程序指令
        系统调用：等待和持续

    当中断产生后，
        硬件：
            设置中断标记(CPU初始化)：1.将内部、外部事件设置中断标记  2.中断事件的ID
        软件：
            保存当前处理状态，中断服务程序处理，清除中断标记，恢复之前保存的处理状态
    异常产生后：先产生一个异常编号
        保存现场
        异常处理：杀死产生异常的程序或是重新执行异常指令
        恢复现场
    系统调用：
        操作系统有一个通用的系统调用接口，当应用程序发送系统调用请求时，由操作系统执行响应的操作
        程序访问主要是通过高层的API接口而不是直接进行系统调用
        当应用程序调用系统调用时，会完成从用户态到内核态的转换
        应用态：只有少部分权限
        内核态：可以执行任何权限，通过这俩个状态来保证系统的安全性

    跨越操作系统边界的开销
        在执行时间上的开销超过程序调用
        开销：
            建立中断/异常/系统调用号与对应服务例程映射关系的初始化开销
            建立内核堆栈
            验证参数
            内核态映射到用户态的地址空间，更新页面映射权限
            内核态独立地址空，TLB


3.1 计算机系统结构及内存分层体系
    内存的层次结构
        微处理器内部：CPU寄存器和L1缓存，还有L2缓存
        然后是主存和磁盘
    操作系统管理内存的目标：
        抽象：逻辑地址空间，需要提供一段连续的内存
        保护：独立地址空间，保证程序访问内存时不破坏其他程序的内存空间
        共享：访问相同内存，程序时间可能需要进行信息的交互共享
        虚拟化：更多的地址空间，暂时不需要的数据存放在磁盘上
    操作系统管理内存的不同方法：
        程序重定位
        分段
        分页
        虚拟内存
        按需分页虚拟内存
    实现高度依赖于硬件
        必须知道内存架构
        MMU(内存管理单元)：硬件组件负责处理CPU的内存访问请求

3.2 地址空间与地址生成
    地址空间：
        物理地址空间：硬件支持的地址空间
        逻辑地址空间：运行的程序拥有的内存范围，是一个一维的线性的地址空间
    逻辑地址的生成：
        编译 -> 汇编 -> 链接 -> 载入
        映射关系：这个映射关系存放在CPU中的MMU，关系的形成是通过操作系统完成的
            逻辑地址(LA) <-> 物理地址(PA)
        操作系统需要保证放在内存中的程序之间不能相互干扰，所以需要对每个程序的内存范围进行一定的限制和约束，这个限制和约束也是依赖操作系统完成的

3.3 连续内存分配：内存碎片与分区的动态分配
    内存碎片问题
        外部碎片，分配单元之间没有使用的内存
        内部碎片，分配单元内的未使用的内存
    分区的动态分配：
        当一个程序可以在内存中运行时，分配一个连续的区间，并且分配一个连续的内存区间供运行的程序访问数据
        简单的内存分配策略：
        - 首次适配
            将第一个可用空闲块的空间分配
            需求：
               按地址裴谞的空闲块列表
               分配需要寻找一个合适的分区
               重分配需要检查，看是否自由分区能合并于相邻的空闲分区
            优点：
                简单、易于产生更大空闲块，向着地址空间的结尾
            缺点：
                容易产生外部碎片，有不确定性
        - 最优适配
            寻找空闲块中最匹配的空闲块
            能够避免分割大空闲块，并且能够最小化外部碎片产生的尺寸
            需求：
                按尺寸排列的空闲块列表
                分配需要好寻找一个合适的分区
                重分配需要搜索及合并相邻的空闲分区
            优点：
                当大部分分配是小尺寸时非常有效且比较简单
            缺点：
                外部碎片很零碎，且重分配慢，容易产生很多没用的微小碎片
        - 最差适配
            寻找空闲块中差距最大的空闲块
            为了避免产生太多微小的碎片
            需求：
                按尺寸排列的空闲块列表
                分配很快
                重分配需要合并于相邻的空闲分区然后调整空闲块列表
            优点：
                假如分配是中等尺寸效果最好
            缺点：
                重分配慢
                外部碎片
                易于破碎大的空闲块以至于大分区无法被分配

3.4 连续内存分配：压缩式与交换式碎片整理
    压缩式碎片管理
        重置程序以合并孔洞，要求所有程序是动态可重置的
        问题：什么时候进行重置？开销？
    交换式碎片整理
        运行程序需要更多的内存，当前内存的空闲空间已经不能满足需求
        抢占等待的程序的空间，回收它们的内存，将等待程序放到硬盘上
        问题：哪些程序交换？什么时候交换？开销？

4.1 非连续内存分配：分段
    为什么需要非连续内存分配？
    连续内存分配的缺点：
        分配给一个程序的物理内存是连续的
        内存利用率低
        有外碎片、内碎片的问题
    非连续内存分配的优点：
        一个程序的物理地址空间是非连续的
        更好的内存利用和管理
        允许共享代码与数据(共享库等...)
        支持动态加载和动态链接
    缺点：
        管理开销
        如何建立虚拟地址和物理地址之间的转换？
            · 软件方案
            · 硬件方案
        两种硬件方案：
            · 分段
            · 分页

    分段：更好的分离和共享
        程序的分段地址空间
            通过段机制的映射将逻辑地址空间映射到不同的物理地址空间
        分段寻址方案
            一个段：一个内存块
            程序访问内存地址需要：一个二维的二元组(s, addr) s是段号，addr是段内偏移
            段寄存器+地址寄存器实现方案：段号和偏移是分开的
            单地址实现方案：段号和偏移是合在一起的

            硬件实现方案：
                程序执行时，CPU要进行寻址，将逻辑地址分为2块，分别为段号和偏移，通过段号在段表中可以找到段的物理内存的起始地址和限制长度
                查找到物理内存的信息后，CPU会查看地址是否合法，如果不合法就会产生异常，如何合法就通过逻辑地址和偏移量计算得到物理地址
                段表内存放映射关系，逻辑地址的段号和物理地址的段号对应关系，以及每个段的起始地址和长度信息
                段表是由操作系统建立的

4.2 非连续内存分配：分页
    分页地址空间：
        分页同样也需要页号和页偏移量，与分段不同的是，页的大小时不可变的

        划分物理内存至固定大小的帧，大小是2的幂，例如512 4096 8192
        划分逻辑地址空间至相同大小的页，这个与物理内存的页的大小相同

        建立方案，转换逻辑地址为物理地址(pages to frames)：页表、MMU/TLB

        页帧(frame)
        物理内存被分割为大小相等的值，一个内存同样是二元组，(f,o), f帧号(F位，共有2^F个帧), o是帧内偏移(S位，每帧2^S字节)
        物理地址 = 2^S * f + o

        例如，16bit地址空间，9bit大小的页帧，物理地址为(3,6)则实际的地址为1542
            16bit中后9bit表示页帧，则前7位表示帧号，所以F=3，S=9，f=3，o=6，即 2^9 * 3 + 6 = 1542

        页(page)
        一个程序的逻辑地址空间被划分为大小相等的页
            页内偏移大小 = 帧内偏移大小
            页号大小可能与帧号大小不同
        逻辑地址也是二元组(p,o) p页号(P位，2^P个页)，o页内偏移(S位，每页2^S个字节)
        虚拟地址 = 2^S * p + o

    页寻址方案：
        程序执行时，逻辑地址是连续的但是物理地址空间可能不连续
        先使用逻辑地址寻址，通过页号p去页表中查找帧号f和页表的基址(base)，知道帧号和偏移后就可以查找到物理地址(偏移与逻辑地址中的偏移相同)
        页表(page table)也是由操作系统建立的，在建立分页机制时就会建立页表

    逻辑地址空间的大小和物理地址空间大小可以不一致，一般来讲逻辑地址空间要大于物理地址空间
    页寻址机制：
        页映射到帧
        页是连续的虚拟内存
        帧是非连续的物理内存  这样可以减少碎片
        不是所有的页都有对应的帧

4.3 非连续内存分配：页表-概述、TLB
    页表
        页表概述
            页表的索引就是PageNumber即页号，内容就是FrameNumber即帧号
            页表中有一个resident bit位表示该索引对应的物理地址是否存在，为1表示存在，为0表示不存在
            问题：
                访问一个内存单元需要2次内存访问
                    一次用于获取页表项，一次用于访问数据
                页表可能非常大
            解决方案：
                缓存(Caching)
                间接(Indirection)访问

            TLB：Translation Look-aside Buffer
            缓存近期访问的页帧转换表项
                TLB使用associative memory(关联内存)实现
                如果TLB命中，物理页号可以很快被获取
                如果TLB未命中，对应的表项被更新到TLB中
        转换后备缓冲区(TLB)
        二级/多级 页表
        反向页表

4.4 非连续内存分配：页表-二级、多级页表
    将单一的页表划分为两个页表，偏移不做修改，但是页号进行划分，分为p1和p2，分别对应一级页表和二级页表，将一个大的页表寻址改为对两个小的页表寻址
    一级页表存放的是二级页表的起始地址，加上p2，去二级页表查找frameNumber
    然后以此类推可以形成多级页表，形成树状结构

4.5 非连续内存分配：页表-反向页表
    有大地址空间，前向映射页表变得繁琐，例如64位系统需要5级页表
    因此使用反向页表，不是让页表与逻辑地址空间的大小相对应，而是让页表与物理地址空间的大小相对应

    基于页寄存器的方案
        设计一个页寄存器数组，以帧号为索引，页号为值，使得寄存器容量只有物理地址空间大小有关
        问题：
            如何通过pageNumber来获取frameNumber
        优点：
            转换表的大小相对于物理内存来说很小
            转换表的大小跟逻辑地址空间的大小无关
        缺点：
            需要的信息对调了，即根据帧号可以找到页号
            如何转换回来？即根据页号找到帧号
            需要在反向页表中搜索想要的页号

    关联内存(associative memory)方案，每个存储器可以并行的根据帧号查找页号
        如果帧数较少，页寄存器可以被防止在关联内存中
        在关联内存中查找逻辑页号：成功：帧号被提取 失败：页错误异常
        限制因素：大量的关联内存非常昂贵，难以在半个时钟周期内完成，耗电

    基于哈希查找的方案
        在反向页表中通过哈希算法来搜索一个页对应的帧号
        · 对页号做哈希计算，获取表中对应的帧号
        为了查找页i，执行下列操作：
            计算哈希函数f(i)并使用它作为页寄存器表的索引，获取对应的页寄存器
            检查寄存器标 签是否包含i，如果包含，能代表成功，否则失败

5.1 虚拟内存的起因
    因为程序越来越大，所以内存不够用，期望有一种空间大，速度快，价格便宜的内存出现，因此通过硬盘来实现这个功能，将不常用的程序和数据先存放到硬盘上进行管理
    虚拟内存，以页为单位，将数据保存到硬盘上

5.2 覆盖技术
    目标：在较小的内存中运行比较大的程序
    原理：
        把程序按照其自身逻辑结构，划分为若干个功能上相对独立的程序模块，那些不会同时执行的模块共享同一块内存区域，按照时间先后来运行
        必要部分(常用功能)的代码和数据常驻内存
        可选部分(不常用功能)在其他程序模块中实现，平时存放在外存中，在需要使用时才装入内存
        不存在调用关系的模块不必同时装入到内存，从而可以相互覆盖，即这些模块公用一个分区
    缺点：
        由程序员来把一个大程序划分为若干个小的功能模块，并确定各个模块之间的覆盖关系，耗时耗力，增加了变成的复杂度
        覆盖模块需要从外存装入内存，实际上是以时间换空间

5.3 交换技术
    目标：多道程序在内存中时，让正在运行的程序或需要运行的程序获得更多内存资源
    方法：
        可以将暂时不能运行的程序送到外存，从而获得空闲的内存空间
        操作系统把一个进程的整个地址空间的内容保存到外存中(换出swap out)，而将外存中的某个进程的地址空间读入到内存时(换入swap in)，换入换出内容的大小为整个程序的地址空间
    问题：
        交换时间的确定：只当内存空间不够或者有不够的风险时换出
        交换区的大小：必须足够大以存放所有用户进程的所有内存映射的拷贝：必须能够对这些内存映像进行直接读取
        程序换入时的重定位：换出后再换入的内存位置一定要在原来的位置上嘛？最好采用动态地址映射的方法

覆盖与交换的比较
    覆盖只能发生在那些相互之间没有调用关系的程序模块之间，因此程序员必须给出程序内的各个模块之间的逻辑覆盖结构
    交换技术是以在内存中的程序大小为单位来进行的，它不需要程序员给出各个模块之间的逻辑覆盖结构。
    换言之，交换发生在内存中程序与管理程序或操作系统之间，而覆盖则发生在运行程序的内部

5.4.1 虚存技术(上)
    目标：在内存不够用的情形下，可以采用覆盖技术和交换技术，但是：
        覆盖技术：需要程序员自己吧整个程序划分为若干个小的功能模块，并确定各个模块之间的覆盖关系，增加了程序员的复旦
        交换技术：以进程作为交换的单位，需要把进程的整个地址空间都换进换出，增加了处理器的开销
    解决方法：虚存技术：
    目标：
        像覆盖技术那样，不是把程序的所有内容都放在内存中，因而能够运行比当前的空闲内存空间还要大的程序。但做的更好，由操作系统自动来完成，无须程序员的干涉。
        像交换技术那样，能够实现进程在内存和外存之间的交换，因而获得更多的空闲内存空间。但做的更好，只对进程的部分内容在内存和外存之间进行交换
    程序的局部性原理：指程序在执行过程中的一个较短时期，所执行的指令地址和指令的操作数地址，分别局限于一定区域。
        时间局部性：一条指令的一次执行和下次执行，一个数据的一次访问和下次访问都集中在一个较短的时期内
        空间局部性：当前指令和邻近的几条指令，当前访问的数据和邻近的几个数据都集中在一个较小的区域内
    原理表明：从理论上来说，虚拟存储技术是能够实现的，而且在实现了以后应该是能够取得一个满意的结果的

    虚存技术-基本概念
        可以在页式或段式内存管理的基础上实现
        · 在装入程序时，不必将其全部装入到内存，而只需将当前需要执行的部分页面或段装入到内存，就可以让程序开始执行
        · 在程序执行过程中，如果需要执行的指令或访问的数据尚未在内存(称为缺页或缺段)，则由处理器通知操作系统将相应的页面或段调入到内存，然后继续执行
        · 另一方面，操作系统将内存中暂时不使用的页面或段调出保存在外村上，从而腾出更多空闲空间存放将要装入的程序以及将要调入的页面或段
    基本特征：
        大的用户空间：通过把物理内存与外存相结合，提供给用户的虚拟内存空间通常大于实际的物理内存，即实现了这两者的分离。
        部分交换：与交换技术比较，虚拟存储的调入和调出是对部分虚拟地址空间进行的
        不连续性：物理内存分配的不连续，虚拟地址空间使用的不连续

5.4.2 虚存技术(下)
    虚拟页式内存管理
        大部分虚拟存储系统都采用虚拟页式存储管理技术，即在页式存储管理的基础上，增加请求调页和页面置换功能
        基本思路：
            当一个用户程序要调入内存运行时，不是将该程序的所有页面都装入内存，而是只装入部分的页面，就可以启动程序
            在运行过程中，如果发现要运行的程序或要访问的数据不在内存，则向系统发出缺页的中断请求，系统在处理这个中断时，将外存中响应的页面调入内存，使得程序能够继续运行
        为了实现这些功能，需要在页表项上增加辅助的bit位
            - 驻留位：表示该页是在内存还是在外寸，如果为1，表示在内存中，即是有效的，可以使用，如果是0，表示该页还在外存中，如果访问该页表项，就会导致缺页中断
            - 保护位：表示允许对该页进行和中类型的访问，例如只读、可读写、可执行等
            - 修改位：表明此页在内存中是否被修改过。当系统回收该物理页面时，根据此位来决定是否把它的内容写回外存
            - 访问位：如果该页面被访问过，则设置为1，用于置换算法

    缺页中断处理过程：
        1.如果在内存中有空闲的物理页面，则分配一物理页帧f，然后转第4步，否则转第2步
        2.采用某种页面置换算法，选择一个奖杯替换的物理页帧f，它所对应的逻辑页为q，如果该页在内存期间被修改过，则需要把它写回外存
        3.对q所对应的页表项进行修改，把驻留位置0
        4.将需要访问的页p装入到物理页面f中
        5.修改p所对应的页表项内容，把驻留位置1，把物理页帧号设置为f
        6.重新运行被中断的指令

    后备存储 backing store
        在何处保存未被映射的页？
            能够简单地识别在二级存储器中的页
            交换空间(磁盘或者文件)：特殊格式，用于存储未被映射的页面
        概念：后备存储
            一个虚拟地址空间的页面可以被映射到一个文件(在二级存储中)的某个位置
            代码段：映射到课执行的二进制文件
            动态加载的共享库程序段：映射到动态调用的库文件
            其他段：可能被映射到的交换文件(swap file)